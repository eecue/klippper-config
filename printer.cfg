# This file contains common pin mappings for the Fysetc Spider board.# To use this config, the firmware should be compiled for the STM32F446.
# When calling "menuconfig", enable "extra low-level configuration setup"
# and select the "12MHz crystal" as clock reference
# For flashing, write the compiled klipper.bin to memory location 0x08000000

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm Spider TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Fine tune E steps					[extruder] section

[mcu]
##  You need to select 'Communication interface' to USB in 'make menuconfig'
##  when you compile Klipper for Spider
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
## serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_230032000851363131363530-if00
##	If you want to use the Raspberry uart0 to communicate with Spider, 
##  you need to select 'Communication interface' to 'Serial (on USART1 PA10/PA9)' 
##  in 'make menuconfig' when you compile klipper and set the serial as below
##--------------------------------------------------------------------
serial: /dev/ttyAMA0
##--------------------------------------------------------------------
restart_method: command

[printer]
kinematics: corexy
max_velocity: 600  
max_accel: 5600			        #Max 4000
max_z_velocity: 15			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
##	Connected to X-MOT (B Motor)
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
#endstop_pin: ^PB14 # orig
endstop_pin: ^PB13
position_min: 0

##--------------------------------------------------------------------

##	Uncomment below for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
position_endstop: 300
position_max: 300

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PE7
interpolate: True
run_current: 1.0
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
##	Connected to Y-MOT (A Motor)
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
#endstop_pin: ^PB13 # orig
endstop_pin: ^PB14
position_min: 0
##--------------------------------------------------------------------

##	Uncomment for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
position_endstop: 300
position_max: 300

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PE15
interpolate: True
run_current: 1.0
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

## In Z-MOT Position **** eecue - Z3 
## Z0 Stepper - Front Left 
[stepper_z]
step_pin: PD12
dir_pin: !PC4
enable_pin: !PE8
# step_pin: PD14 # orig
# dir_pin: !PD13 # orig
# enable_pin: !PD15 # orig
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
##  In Z- Position
# endstop_pin: ^PA0
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
position_max: 300
position_min: -10
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
#uart_pin: PD10 # orig
uart_pin: PA15
uart_address: 0
interpolate: True
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


##	In E3-MOT Position **** eecue - Z0 
##	Z3 Stepper - Front Right
[stepper_z3]
#step_pin: PD12 # orig
#dir_pin: PC4 # orig
#enable_pin: !PE8 # orig
step_pin: PD14 
dir_pin: PD13
enable_pin: !PD15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z3]
#uart_pin: PA15 # orig
uart_pin: PD10
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	In E1-MOT Position
##	Z1 Stepper - Rear Left
[stepper_z1]
step_pin: PE6
dir_pin: PC13
enable_pin: !PE5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC14
interpolate: True
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	In E2-MOT Position
##	Z2 Stepper - Rear Right
[stepper_z2]
step_pin: PE2
dir_pin: !PE4
enable_pin: !PE3
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PC15
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0



#####################################################################
#   Extruder
#####################################################################

##	In E0-MOT Position
[extruder]
step_pin: PD5
dir_pin: PD6
enable_pin: !PD4

##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
#rotation_distance: 22.6789511	#Bondtech 5mm Drive Gears
# Galileo Clockwork 
# Stepping: 16
# Steps/mm: 0.00150 as a start, then calibrate from there
#Current: LDO - No more than 0.4A (I run 0.330A), Wantai - No more than 1A.
#    Worth note, the LDO is a high-temp stepper, while the Wantai is not.  Both will run hot, the Wantai can't take as much heat, which may require a reduction in current to achieve.
#StealthChop: 0
#rotation_distance: ~6*2*pi = ~36mm = 35.4mm
gear_ratio: 7.5:1
# rotation_distance: 35.4
# New Config Value = Old Config Value * (Actual Extruded Amount/Target Extruded Amount)
rotation_distance: 35.4 # 35.4 * 115/120
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
# gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
##      In E0 OUT Position
heater_pin: PB15
##	Validate the following thermistor type to make sure it is correct
sensor_type: NTC 100K beta 3950
sensor_pin: PC0
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
# Measured 13.21mm 
#pressure_advance: 0.050
pressure_advance: 0.06605
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##	In E0-MOT Position
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PD7
interpolate: false
run_current: 0.6
hold_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################
[heater_bed]
##	SSR Pin - In BED OUT position
heater_pin: PB4
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PC3
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.8
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#	Probe
#####################################################################

[probe]
##	Inductive Probe - If you use this section , please comment the [bltouch] section
##	This probe is not used for Z height, only Quad Gantry Leveling
##	In Z+ position
##	If your probe is NO instead of NC, add change pin to ^PA3
pin: ^PA3
#z_offset = 6.42
z_offset = 7.25
x_offset: 0
y_offset: 19.75
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3

#####################################################################
#	Resonance
#####################################################################

[adxl345]
#spi_bus: spi1
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
axes_map: -y,z,x
cs_pin: PA4

[resonance_tester]
accel_chip: adxl345
probe_points:
    150,150,20

[input_shaper]
shaper_freq_x: 53.2 
shaper_type_x: mzv
shaper_freq_y: 37.4
shaper_type_y: mzv

#####################################################################
#	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - FAN0 Connector
pin: PB0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan]
##	Print Cooling Fan - FAN1 Connector
pin: PB1
max_power: 1.0
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[controller_fan controller_fan]
##	Controller fan - FAN2 Connector
pin: PB2
kick_start_time: 0.5
heater: heater_bed
fan_speed: 0.2

[fan_generic exhaust]
pin: PB6
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0


[heater_fan nevermore]
pin: PB5
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 35
fan_speed: 1.0

#####################################################################
#	LED Control
#####################################################################

#[output_pin caselight ]
##  Chamber Lighting - In 5V-RGB Position
#pin: PD3
#pwm: true
#shutdown_value: 0
#value:100
#cycle_time: 0.01

#####################################################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

# [safe_z_home]
# ##	XY Location of the Z Endstop Switch
# ##	Update -10,-10 to the XY coordinates of your endstop pin 
# ##	(such as 157,305) after going through Z Endstop Pin
# ##	Location Definition step.
# home_xy_position:208,300
# speed:100
# z_hop:10
   
[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

	
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
gantry_corners:
	-60,-10
	360,370
##	Probe points
points:
	50,25
	50,225
	250,225
	250,25

#--------------------------------------------------------------------
speed: 300
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10


# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further

[gcode_macro User_Variables]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          200   # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            50    # how fast should the toolhead move when docking the probe for the final movement
variable_release_speed:         100    # how fast should the toolhead move to release the hold of the magnets after docking
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
# 208,300
#variable_z_endstop_x:           208
#variable_z_endstop_y:           300
variable_z_endstop_x:          0
variable_z_endstop_y:          0

# location to park the toolhead
variable_park_toolhead:         False  # Enable toolhead parking
variable_parkposition_x:        150
variable_parkposition_y:        150
variable_parkposition_z:        30

#dock location
variable_docklocation_x:        2    # X Dock position
variable_docklocation_y:        300   # Y Dock position
variable_docklocation_z:        15    # Z dock position
variable_dockarmslenght:        30    # Dock arms lenght, toolhead movement necessary to clear the dock arms

#Umbilical to help untangle the umbilical in difficult situations
variable_umbilical_x:           15    #X umbilical position
variable_umbilical_y:           15    #Y umbilical position
variable_umbilical:             False #should we untabgle the umbilical

# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}


[gcode_macro Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:


[gcode_macro Homing_Variables]
default_parameter_reset:            0
gcode:
    {% set R  = params.RESET %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ True }


# Attach probe and lock it
[gcode_macro Dock_Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Attach Probe Routine
[gcode_macro Attach_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}

    #prior to saving actual position, check if its necessary to move to a safe Z
    #that has enought overhead for the attached probe
    {% if (printer.toolhead.position.z < Hzh) %}
        G1 Z{Hzh} F1200
    {% endif %}
    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_attachProbe
    SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F1200
        {% endif %}

        Umbilical_Path

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F600
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000
        #Go to Z safe distance
        G1 Z{Hzh} F600
        Park_Toolhead

        CheckProbe action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_attachProbe


# Dock Probe Routine
[gcode_macro Dock_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro User_Variables"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro User_Variables"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}

    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_dockProbe
    SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        Umbilical_Path

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F{Sz}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int + 40} Y{Dy} F{Sr}
        #Go to Z safe distance
        G1 X{Dx|int + 40} Y{Dy|int - 5} Z{Hzh} F{St}

        Park_Toolhead

        CheckProbe action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_dockProbe



# Quad Gantry Level
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:             _QUAD_GANTRY_LEVEL
gcode:
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    CheckProbe action=query
    Attach_Probe

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    Dock_Probe


# Z Tilt Adjust
#[gcode_macro Z_TILT_ADJUST]
#rename_existing:             _Z_TILT_ADJUST
#gcode:
#    {% set V = printer["gcode_macro User_Variables"].verbose %}
#    {% if V %}
#        { action_respond_info("Z Tilt Adjust") }
#    {% endif %}
#
#    CheckProbe action=query
#    Attach_Probe
#
#    _Z_TILT_ADJUST {% for p in params
#          %}{'%s=%s ' % (p, params[p])}{%
#         endfor %}
#    G28 Z0
#    Dock_Probe


# Screws Tilt Adjust
#gcode_macro SCREWS_TILT_CALCULATE]
#rename_existing:             _SCREWS_TILT_CALCULATE
#gcode:
#    {% set V = printer["gcode_macro User_Variables"].verbose %}
#    {% if V %}
#        { action_respond_info("Screws Tilt Adjust") }
#    {% endif %}
#
#    CheckProbe action=query
#    Attach_Probe
#
#    _SCREWS_TILT_CALCULATE {% for p in params
#          %}{'%s=%s ' % (p, params[p])}{%
#         endfor %}
#
#    Dock_Probe

# Bed Mesh Calibrate
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    CheckProbe action=query
    Attach_Probe

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    Dock_Probe


# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    
    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
    
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    Dock_Probe

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    Dock_Probe

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

# Homeing Override
[homing_override]
axes:                             xyz
gcode:
    # collect user state variables
    User_Variables
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}

    {% if (not 'z' in printer.toolhead.homed_axes) %}
        SET_KINEMATIC_POSITION Z=0
        G90
        G0 Z{Hzh} F600
    {% endif %}

    CheckProbe action=query

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            Homing_Variables reset=1
         {% endif %}

    {% endif %}

    # Home x
    {% if X %}
        {% if V %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
    {% endif %}

    # Home y
    {% if Y %}
        {% if V %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
    {% endif %}

    # Home z
    {% if Z %}
        {% if V %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # if probe is configured as endstop, attach it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Attach_Probe
        {% endif %}

        Home_Z


        # if probe is configured as endstop, dock it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Dock_Probe
        {% endif %}
    {% endif %}
  CheckProbe action=query

    # park the toolhead
    Park_Toolhead

# umbilical path setup
[gcode_macro Umbilical_Path]
gcode:
    {% set Ux = printer["gcode_macro User_Variables"].umbilical_x %}
    {% set Uy = printer["gcode_macro User_Variables"].umbilical_y %}
    {% set U = printer["gcode_macro User_Variables"].umbilical    %}
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}

    {% if U %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
        G1 X{Ux} Y{Uy} Z{Hzh} F{St}
    {% endif %}


# Home Z Routine
[gcode_macro Home_Z]
gcode:
    {% set Zx = printer["gcode_macro Probe_Variables"].z_endstop_x         %}
    {% set Zy = printer["gcode_macro Probe_Variables"].z_endstop_y         %}
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    {% else %}
        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # move tool to safe homing position and home Z axis
        # location of z endstop
        G1 X{Zx} Y{Zy} Z{Hzh} F{St}
        G28 Z0
        G1 Z{Hzh} F{Sz}

    {% endif %}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CheckProbe]
variable_probe_state:           0
default_parameter_action:
gcode:
    Query_Probe
    SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SetProbeState]
default_parameter_action:
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro User_Variables"].park_toolhead %}
    {% set Px = printer["gcode_macro User_Variables"].parkposition_x %}
    {% set Py = printer["gcode_macro User_Variables"].parkposition_y %}
    {% set Pz = printer["gcode_macro User_Variables"].parkposition_z %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    {% if (P and 'xyz' in printer.toolhead.homed_axes) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G90
        G1 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}


#####################################################################
#	Displays
#####################################################################

#--------------------------------------------------------------------
[display]
#   mini12864 LCD Display
lcd_type: uc1701
cs_pin: PC11
a0_pin: PD2
rst_pin: PC10
encoder_pins: ^PC7,^PC6
click_pin: ^!PA8
contrast: 63
# spi_bus: spi1
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5



[neopixel fysetc_mini12864]
#   To control Neopixel RGB in mini12864 display
pin: PC12
chain_count: 3
chain_count: 60
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

#   Set RGB values on boot up for each Neopixel. 
#   Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=.2 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=.2 BLUE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=.2 BLUE=1 INDEX=3 

#--------------------------------------------------------------------

#####################################################################
#	Temperature Sensors
#####################################################################

[thermistor NTC100k3950_airtemp]
#sensor_pin: PC2
temperature1: 20
resistance1: 125245
temperature2: 50
resistance2: 35900
temperature3: 80
resistance3: 12933

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

# [temperature_sensor chamber]
# #sensor_type: EPCOS 100K B57560G104F
# #sensor_type: NTC 100K beta 3950
# sensor_type: NTC100k3950_airtemp
# sensor_pin: PC1
# min_temp: 0
# max_temp: 100
# gcode_id: chamber

[thermistor chamber_temp]
temperature1: 25
resistance1: 10000
beta: 3950


[temperature_sensor chamber]
sensor_type: chamber_temp
sensor_pin: PC1
min_temp: 0
max_temp: 100
gcode_id: C


[frame_expansion_compensation]
coeff: 23.4
#   Coefficient of linear expansion for the frame material [μm/m·°C].
#   E.g. 23.4 μm/m·°C for Misumi A6N01SS-T5 6005A-T5 aluminum alloy.
frame_z_length: 480
#   Total length of vertical extrusions [mm].
gantry_factor: .9
#   Relationship between gantry expansion and toolhead Z movement.
#   Examples:
#      if 1mm expansion moves toolhead up 1mm, gantry_factor: 1.0
#      if 1mm expansion moves toolhead up 0.5mm, gantry_factor: 0.5
#      if 1mm expansion moves toolhead down 1mm, gantry_factor: -1.0
#   The default is 1.0.
#max_comp_z:
#   Disables compensation above this Z height [mm]. The last computed correction
#   will remain applied until the toolhead moves below the specified Z position
#   again. The default is 0.0mm (always on).
#max_z_offset:
#   Maximum absolute compensation that can be applied to the Z axis [mm]. The
#   default is 99999999.0mm (unlimited).
#sensor_type: NTC 100K beta 3950
sensor_type: NTC100k3950_airtemp
sensor_pin: PC2
min_temp: 0
max_temp: 100
#   See the "extruder" section for the definition of the above
#   parameters.
gcode_id: frame
#   See the "heater_generic" section for the definition of this
#   parameter.
z_stepper: stepper_z
#   The Z stepper motor linked with the Z endstop, as written in printer.cfg.
#   Used for triggering reference temperature measurement. Usually 'stepper_z'
#   unless otherwise defined.

#####################################################################
#	Macros
#####################################################################

[gcode_macro G32]
gcode:
    G90
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_PROFILE LOAD=default
    G28
    clean_nozzle
    ##	Uncomment for 300 build
    # G0 X150 Y150 Z30 F3600

   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G32                            ; home all axes
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    
    ; anti-stringing
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract 2mm of filament at 60mm/s
    G91                            ; relative positioning
    G1 X1 F20000                   ; move 1mm to the side at 333mm/sec
    G2 E0 I-1                      ; do a no extrusion circle move with a 0.5mm radius centered on original stop coordinate
    G1 Z5.00 F3000                 ; move up by 5mm @ 50mm/sec to clear the print
    G90                            ; absolute positioning
    G1 X125 Y250 F3600             ; park toolhead at the rear
    
    ; cool hotend
    TURN_OFF_HEATERS
    M106                           ; max part fan to cool nozzle
    G4 S10                         ; wait 10 sec
    M107                           ; turn off parts fan
    
    ; reset print setting overrides through the LCD panel
    M220 S100                      ; reset flow rate to 100%
    M221 S100                      ; reset extrude factor to 100%
    
    # BED_MESH_CLEAR
    
## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000

[bed_mesh]
speed: 300
horizontal_move_z: 10
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
#mesh_min: 40, 40
#mesh_max: 210,210

##	Uncomment for 300mm build
mesh_min: 40, 40
mesh_max: 260,260
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12

[gcode_macro CENTER_ALL]
gcode:
  G90
  G1 X150 Y0 Z100 F30000

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E2 F300                            ; (CAUSING CLOGS AT 10mm?) extrude a little to soften tip 
    G1 E-50 F1800                        ; retract filament completely
    G1 E-50 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E45 F300                           ; quickly load filament to down filament path
    G1 E40 F300                           ; slower extrusion for hotend path / prime
    RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro PREHEAT_ABS]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=240
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110


[gcode_macro Z_END_CALIBRATE]
gcode:
    PREHEAT_ABS
    G28
    clean_nozzle
    G28
    QUAD_GANTRY_LEVEL
    G28
    BED_MESH_CLEAR
    G1 X150 Y150 Z4 F7800
    Z_ENDSTOP_CALIBRATE

#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Discord) and edited by Edwardyeeks (edwardyeeks#6042 on Discord). Several ideas that made it as features by
# Deutherius (deutherius#3295 on Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are plentiful, making this macro
# look huge but informative and are laid out in sequence to be read first describing the line below; PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2. It can be tweaked to customised purge bucket geometries and brushes.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled. The purge and scrubbing routine is randomized
# in either left or right bucket to ensure as even as possible distribution of filament gunk.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main printer config. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.
# Users of Fluidd, Mainsail and other klipper front ends would find it under /home/pi/klipper_config/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running Fluidd, Mainsail and other front ends will need to use the following location instead:
# [include /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

# Name of the macro is clean_nozzle.

[gcode_macro clean_nozzle]

# If you are putting your purge bucket at the rear left of the bed as per default installation, enable True on your location_bucket_rear 
# variable. If you want to put your purge bucket elsewhere (perhaps the front), then set it to False. See diagrams and description 
# further below on how to set your XY position.
variable_location_bucket_rear:      True

# If you want the purging routine in your bucket enabled, set to True (and vice versa).
variable_enable_purge:              True

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      240	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             2            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            2            ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:            2

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              3	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        5000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
## For V1.8, you may need to measure where your brush is on the x axis and input manually into any of the variable_brush_start uncommented.
## For V2.4 250mm build, uncomment this below: 
#variable_brush_start:     25	    

## For V2.4 300mm build, uncomment this below:
variable_brush_start:     50

## For V2.4 350mm build, uncomment this below:
#variable_brush_start:     75

# This value is defaulted from brush location in CAD (rear left). Change if your brush width is different.
variable_brush_width:          52	

## These are only used if location_bucket_rear is False. You specify a custom location in y axis for your brush - see diagram above. ##
variable_brush_front:       0          
variable_brush_depth:       0          


# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 
## For V2.4 250mm build, uncomment below 
#variable_bucket_left_width:    42

## For V2.4 300mm build, uncomment below
variable_bucket_left_width:    67

## For V2.4 350mm build, uncomment below
#variable_bucket_left_width:    92   

# These values are defaulted from bucket geometry in CAD (rear left location). Change only if you're using a custom bucket.
variable_bucket_right_width:   40            
variable_bucket_gap:           22	

# For V1.8, you may need to measure where your bucket start is and input into bucket_start. Otherwise, a value of 0 is for a default
# installation of purge bucket at rear left.
variable_bucket_start: 0


###############################################################################################################################################
###############################################################################################################################################

### From here on, unless you know what you're doing, it's recommended not to change anything. Feel free to peruse the code and reach out to me
### (edwardyeeks#6042) on Discord if you spot any problems!

###############################################################################################################################################
###############################################################################################################################################

# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}

      {% endif %}
   
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
         G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
      {% endfor %}
   
      ## Clear from area.
      # M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{bucket_left_width / 4} F{prep_spd_xy} 

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
variable_paused: True
default_parameter_X: 125
default_parameter_Y: 125
default_parameter_Z: 10
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    BASE_PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    SET_GCODE_VARIABLE MACRO=RESUME_M600 VARIABLE=x VALUE={printer.gcode_move.gcode_position.x} 
    SET_GCODE_VARIABLE MACRO=RESUME_M600 VARIABLE=y VALUE={printer.gcode_move.gcode_position.y} 
    SET_GCODE_VARIABLE MACRO=RESUME_M600 VARIABLE=z VALUE={printer.gcode_move.gcode_position.z} 
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-67 F1000
    SET_GCODE_VARIABLE MACRO=M600 VARIABLE=paused VALUE=True 
    RESTORE_GCODE_STATE NAME=M600_state  

[gcode_macro RESUME_M600]
variable_x: 125 
variable_y: 125 
variable_z: 125 
gcode:
    SET_GCODE_VARIABLE MACRO=M600 VARIABLE=paused VALUE=False
    SAVE_GCODE_STATE NAME=RESUME_M600_state
    G90
    G1 X75 Y253 F6000
    G91
    G1 E67 F1000
    PURGE_N_BRUSH EXTRUDER={printer.extruder.target} PURGE=100
    G90
    G1 Z{z}
    G1 X{x} Y{y} F6000
    RESTORE_GCODE_STATE NAME=RESUME_M600_state  
    BASE_RESUME



[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  # SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1


# For example SPEEDTEST I=10
# Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
[gcode_macro SPEEDTEST]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    
    SAVE_GCODE_STATE NAME=SPEEDTEST
    G28 X Y
    GET_POSITION
    G90                              ; absolute positioning
    {% for iteration in range(i|int) %}
        G1 X0 Y0     F27000
        G1 X290 Y290 F27000
        G1 X0 Y0     F27000
        G1 X290 Y290 F27000

        G1 X0 Y290 F36000

        G1 X290 Y0 F27000
        G1 X0 Y290 F27000
        G1 X290 Y0 F27000
        G1 X0 Y290 F27000

        G1 X0 Y0 F36000
        G1 X290 Y0 F36000
        G1 X290 Y290 F36000
        G1 X0 Y290 F36000
        G1 X0 Y0 F36000
    {% endfor %}
    G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEEDTEST

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 35.776
#*# pid_ki = 1.223
#*# pid_kd = 261.609
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 14.085
#*# pid_ki = 0.614
#*# pid_kd = 80.813
#*#
#*# [stepper_z]
#*# position_endstop = 1.210
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.047500, -0.027500, -0.015000, -0.017500, -0.030000
#*# 	  -0.030000, -0.002500, -0.002500, -0.005000, -0.030000
#*# 	  -0.020000, 0.010000, 0.000000, 0.000000, -0.022500
#*# 	  -0.015000, 0.007500, 0.002500, 0.002500, -0.017500
#*# 	  -0.030000, 0.002500, 0.000000, 0.005000, -0.017500
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
